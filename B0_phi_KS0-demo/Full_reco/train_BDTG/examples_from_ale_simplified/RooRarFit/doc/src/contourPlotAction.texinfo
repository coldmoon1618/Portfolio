@c This file is meant to be included other texinfo file
@c contour plot action
@c $Id: contourPlotAction.texinfo,v 1.10 2007/06/29 08:37:49 zhanglei Exp $


@anchor{sec_contourPlot}
@cindex contourPlot Action
@cindex action, contourPlot
@cindex RooRarFit contourPlot action
@node contourPlotAction
@subsection contourPlot Action

contourPlot action is to get 2NLL contour plots for two floating parameters.

The default param input is the intermediate param file from mlFit action.
@t{preContourPlotReadParams} and @t{preContourPlotReadSecParams}
can be used to change the initial values.
There is no intermediate param file output.
ROOT file containing contourPlots produced by this action
is for user to review.
As always, log file also provides useful information.

@itemize @bullet
@cindex contourPlot, pdf action
@cindex pdf action, contourPlot
@item @t{contourPlot = <no|yes>}@*
To enable this action, this config must be explicitly set to @t{yes}
(default @t{no}).

@cindex preContourPlotReadParams, pdf action
@cindex pdf action, preContourPlotReadParams
@item @t{preContourPlotReadParams = <yes|no|paramFileID>}@*
NOT to read in initial values of parameters before contourPlot,
this config must be explicitly set to @t{no}
(default @t{yes}).
The param file name will be automatically generated based on this config.
You can specify @uref{#item_paramFileID, @t{paramFileID}}
to change its default name.

@cindex preContourPlotReadSecParams, pdf action
@cindex pdf action, preContourPlotReadSecParams
@item @t{preContourPlotReadSecParams = <no|yes|secName>}@*
If set to @t{yes} (default @t{no}), just after read in params from param file,
the fitter will try to override the params with values found
in the action section.
Instead of @t{yes} or @t{no}, you can also give it a section name,
and then the fitter will try to read values from that section first.

@cindex contourPlotFile, pdf action
@cindex pdf action, contourPlotFile
@item @t{contourPlotFile = <default|contourPlotOutputFile.root>}@*
The root file name will be
@t{<configFile>.<fitterName>.contPlot.<actionName>.root}
unless the token is actually a root file name.

@cindex contourPlotData, pdf action
@cindex pdf action, contourPlotData
@item @t{contourPlotData = <datasetName> ["<optional cut string>"]}@*
This config specifies the dataset for contourPlot action.
You can give this config an optional string as the second token,
which will be applied to the dataset for additional cuts.

@cindex nContours, pdf action
@cindex pdf action, nContours
@item @t{nContours = <2|1|3|4|5|6>}@*
To specify number of contours.
The value should be between 1 and 6
(default @t{2}).
Each contour is 1 sigma (unit in terms of 2NLL) away from inner contour.

@cindex contourVars, pdf action
@cindex pdf action, contourVars
@item @t{contourVars = <varNameX> [xmin] [xmax] <varNameY> [ymin] [ymax]}@*
To specify contour variables,
this config must be explicitly set to the variable names
(default @t{notSet}).
The variable name should be full name,
and for each variable, two optional limits can be specified
to get plot ranges rather than the default ones.

@cindex contourRestrictFloatParams, pdf action
@cindex pdf action, contourRestrictFloatParams
@item @t{contourRestrictFloatParams = <no|yes|nErrorForAll|floatParam1 nError1
         ...>}@*
It might save a lot of time and have a better chance to get a contour plot
if we restrict all other free parameters to narrow ranges.
If set to @t{yes} (default @t{no}),
the limits of every float parameter will be set to 2 times its error
(or remains unchanged if that limit is larger).
You can give a different scale factor for all floating parameters,
or you can give explicitly for each floating parameter a range factor.
The factor can be any positive number.

@end itemize

@cindex example, contourPlot action
An example is shown below:
@example
[fLvsNsigContour]
// contourPlot options
contourPlot = yes
preContourPlotReadParams = yes
contourPlotFile = default
contourVars = nSig fL
nContours = 3
@end example
