@c This file is meant to be included other texinfo file
@c Implementation
@c $Id: implement.texinfo,v 1.13 2007/06/29 08:37:49 zhanglei Exp $


@cindex RooRarFit Implementation
@cindex Implementation, RooRarFit
@node Implementation
@chapter RooRarFit Implementation

@cindex Overview, Implementation
@cindex Implementation, Overview
Detailed implementation documentation
(@uref{@value{COMMONURL}/html/index.html, html},
@uref{@value{COMMONURL}/refman.pdf, pdf})
is generated by doxygen.

The source codes of the new mlFitter can be classified into three groups:
@enumerate
@cindex Auxiliary Classes
@cindex Auxiliary Files
@cindex Main Program
@cindex Scripts
@item Auxiliary Classes, Files, Main Program and Scripts
@itemize @bullet
@cindex rarFit.cc
@anchor{item_rarFit.cc}
@item @uref{@value{COMMONURL}/html/rarFit_8cc.html, rarFit.cc},
      the main program@*
It first creates a @uref{#item_rarDatasets, rarDatasets} object
through which all the datasets are read in,
then it sets the master (@t{mlFitter}) section name and
instantiates @t{mlFitter} class, @uref{#item_rarMLFitter, rarMLFitter},
so that all the pdf are created,
and finally it sets toyID (random seed) and calls
@ifhtml
@uref{@value{COMMONURL}/html/classrarMLFitter.html#a4, run()}
@end ifhtml
@ifnothtml
run()
@end ifnothtml
of the fitter to finish the job.
@cindex short help page
@cindex help page, short
@cindex command line options, help page
If successfully compiled and linked, type @command{rarFit} in workdir
to see short help page like:
@example
rarFit [-options] <RooRarFit_Config_file>
        -h this help page
        -D <data input section> (default "Dataset Input")
        -C <mlFitter config section> (default "mlFitter Config")
        -A <fitter action section> (default "Fitter Action")
        -t <toy job id> (default 0)
        -n <toyNexp> (default 0, use config)
        -d <toy dir> (default .toyData)
@end example
@cindex shell environment variables for RooRarFit
@cindex environment variables for RooRarFit
You can set environment variables to control the behavior of the fitter:
@itemize @bullet
@cindex PARAMDIR, environment variable
@cindex environment variable, PARAMDIR
@item @t{PARAMDIR}: The dir for all param files (default @t{.params})
@cindex RESULTDIR, environment variable
@cindex environment variable, RESULTDIR
@item @t{RESULTDIR}: The dir for all root files (default @t{results})
@cindex random seed, environment variable
@cindex RANDOMSEEDBASE, environment variable
@item @t{RANDOMSEEDBASE}: The random seed will be based on this value and
  toy job ID. It should be an integer (default 0).
@end itemize
Environment variables are intended for scripting,
so it is NOT recommended to use them at command line interactively.

@cindex submitToy
@item @t{submitToy}, script to submit batch (toy) jobs@*
Perl script @t{submitToy} is used to submit batch jobs on many
babar sites, @emph{slac, ral, cu-boulder, ed}.
It is called @t{submitToy}, but it can submit any kind of @t{rarFit} jobs
(actions) which can be split and the results of which can be merged.
For example, toy study, scanPlot (multi-dimensional),
and projPlot (for LLR plot), can be split and submitted using this script.
In @t{workdir}, type @t{submitToy -h} for help page:
@example
Usage : submitToy [options] configFile
 
  where configFile is a RooRarFit config file and
  options are (defaults in parenthesis):
 
     -h           : this help message
     -n nExp      : total number of experiments
     -j nJobs     : number of jobs to run
     -D dsi       : toyAct dsi from config
     -C pdfConfSec: toyAct master pdf section from config
     -A action    : toyAct name from config
     -q queue     : specific queue to submit to
     -d jobDir    : directory for the jobs (toyJob)
     -t           : testing, not submit the jobs in the queue
 
  This script will take a config file that configures
 a RooRarFit job and split it into a number of separate jobs.
 The jobs are then submitted to the queue of your choice.
 
 Example:  submitToy -n 500 -j 10 -A eToyAct -d etoy_omks omks.config
 submits 10 jobs based on the eToyAct action in the
 omks.config file
@end example

@cindex rarStrParser
@item @uref{@value{COMMONURL}/html/classrarStrParser.html,
      rarStrParser}@*
It breaks a string into tokens separated by spaces.
Characters inside quote(") are considered one token.

@cindex Version control header file
@cindex rarVersion.hh
@item @uref{@value{COMMONURL}/html/rarVersion_8hh.html,
      rarVersion.hh}@*
In this header file,
several cpp macros to deal with version related codes are defined,
so the fitter is runnable in @t{analysis-23} as well.

@cindex rarMinuit
@cindex Q2BMinuit
@cindex Contour plot, rarMinuit
@item @uref{@value{COMMONURL}/html/classrarMinuit.html,
       rarMinuit}@*
It is adopted from @t{Q2BFit} for contour plot.

@cindex rarNLL
@cindex scan plot, rarNLL
@cindex NLL, rarNLL
@item @uref{@value{COMMONURL}/html/classrarNLL.html,
       rarNLL}@*
It deals with NLL curves to get significance, upper limits, etc.
By using analytical integral of parabolic fit wrt 3 points in the NLL
curve, the accuracy is much more improved than using just linear fit.

@end itemize

@cindex Dataset Classes
@item Dataset Classes
@itemize @bullet
@cindex rarDatasetDef
@anchor{item_rarDatasetDef}
@item @uref{@value{COMMONURL}/html/classrarDatasetDef.html,
      rarDatasetDef}@*
It defines the format of dataset, ie, how many fields, the type of each field,
etc.

@cindex rarDatasets
@anchor{item_rarDatasets}
@item @uref{@value{COMMONURL}/html/classrarDatasets.html, rarDatasets}@*
It first instantiates a @uref{#item_rarDatasetDef, rarDatasetDef} object
to get the dataset definitions,
then it reads in and holds all the datasets from ascii or root files.
It also holds datasets derived from those primary datasets.
@end itemize

@cindex Pdf Classes
@item Pdf Classes
@itemize @bullet
@cindex rarBasePdf, the base class of pdf builder
@cindex base class of pdf builder, rarBasePdf
@cindex pdf builder, rarBasePdf
@anchor{item_rarBasePdf}
@item @uref{@value{COMMONURL}/html/classrarBasePdf.html, rarBasePdf},
      base class of pdf builder

@c It has several variables common to all the pdf builders,
@c and after created, it calls init() for initialization.

@cindex rarCompBase
@cindex base class for composite pdf builder, rarCompBase
@cindex composite pdf builder, rarCompBase
@anchor{item_rarCompBase}
@item @uref{@value{COMMONURL}/html/classrarCompBase.html, rarCompBase},
      base class for composite pdf builder
@c (add and product)

@cindex rarProd, product pdf builder
@cindex product pdf builder, rarProd
@cindex RooProdPdf
@item @uref{@value{COMMONURL}/html/classrarProd.html, rarProd},
      product pdf builder,
      (@uref{@value{ROOFITURL}/RooProdPdf.html, RooProdPdf})

@cindex rarAdd, add pdf builder
@cindex rarAdd, add model builder
@cindex add pdf builder, rarAdd
@cindex add model builder, rarAdd
@cindex RooAddPdf
@cindex RooAddModel
@anchor{item_rarAdd}
@item @uref{@value{COMMONURL}/html/classrarAdd.html, rarAdd},
      add pdf/model builder,
      (@uref{@value{ROOFITURL}/RooAddPdf.html, RooAddPdf} /
       @uref{@value{ROOFITURL}/RooAddModel.html, RooAddModel})

@cindex rarMLPdf
@cindex extended AddPdf as prototype pdf
@cindex prototype pdf, rarMLPdf
@item @uref{@value{COMMONURL}/html/classrarMLPdf.html, rarMLPdf},
      extended AddPdf as prototype pdf to build final mlFitter, sub-class of
      @uref{#item_rarAdd, rarAdd}

@cindex rarMLFitter
@cindex mlFitter class, sub-class of rarCompBase
@anchor{item_rarMLFitter}
@item @uref{@value{COMMONURL}/html/classrarMLFitter.html, rarMLFitter},
      mlFitter class, sub-class of
      @uref{#item_rarCompBase, rarCompBase},@*
which is instantiated by the main program in
@uref{#item_rarFit.cc, rarFit.cc},
then builds pdfs from top to bottom,
and creates simultaneous fit model through
@cindex RooSimPdfBuilder
@cindex SimPdfBuilder
@uref{@value{ROOFITURL}/RooSimPdfBuilder.html, RooSimPdfBuilder} if required,
and finally finishes its job through
@ifhtml
@uref{@value{COMMONURL}/html/classrarMLFitter.html#a4, run()}
@end ifhtml
@ifnothtml
run()
@end ifnothtml
function called by the main program.

@cindex Wrappers of other RooFit PDF classes
@item Wrappers of other RooFit PDF classes
@itemize @bullet
@cindex rarSimPdf
@cindex Simultaneous
@cindex RooSimultaneous
@item @uref{@value{COMMONURL}/html/classrarSimPdf.html, rarSimPdf},
      (@uref{@value{ROOFITURL}/RooSimultaneous.html, Simultaneous})

@cindex rarExp
@cindex Exponential
@cindex RooExponential
@item @uref{@value{COMMONURL}/html/classrarExp.html, rarExp},
      (@uref{@value{ROOFITURL}/RooExponential.html, Exponential})

@cindex rarGaussian
@cindex Gaussian
@cindex BreitWigner
@cindex RooGaussian
@cindex RooBreitWigner
@item @uref{@value{COMMONURL}/html/classrarGaussian.html,
      rarGaussian},
      (@uref{@value{ROOFITURL}/RooGaussian.html, Gaussian} /
      @uref{@value{ROOFITURL}/RooBreitWigner.html,BreitWigner})

@cindex rarTwoGauss
@cindex TwoGaussian
@cindex DoubleGaussian
@item @uref{@value{COMMONURL}/html/classrarTwoGauss.html,
       rarTwoGauss}, (TwoGaussian)

@cindex rarTriGauss
@cindex TripleGaussian
@cindex RooTripleGaussian
@item @uref{@value{COMMONURL}/html/classrarTriGauss.html,
      rarTriGauss},
      (TripleGauss / TripleGaussModel / GexpShape)

@cindex rarBifurGauss
@cindex BifurGaussian
@cindex RooBifurGauss
@item @uref{@value{COMMONURL}/html/classrarBifurGauss.html,
      rarBifurGauss},
      (@uref{@value{ROOFITURL}/RooBifurGauss.html, BifurGauss})

@cindex rarCBShape
@cindex Crystal Ball Shape
@cindex CBShape
@cindex RooCBShape
@item @uref{@value{COMMONURL}/html/classrarCBShape.html, rarCBShape},
      (@uref{@value{ROOFITURL}/RooCBShape.html, Crystal Ball Shape})

@cindex rarPoly
@cindex Polynomial
@cindex Chebychev
@cindex RooPolynomial
@cindex RooChebychev
@item @uref{@value{COMMONURL}/html/classrarPoly.html,
      rarPoly},
      (@uref{@value{ROOFITURL}/RooPolynomial.html, Polynomial} /
      @uref{@value{ROOFITURL}/RooChebychev.html, RooChebychev})

@cindex rarArgusBG
@cindex ArgusBG
@cindex RooArgusBG
@item @uref{@value{COMMONURL}/html/classrarArgusBG.html,  rarArgusBG},
      (@uref{@value{ROOFITURL}/RooArgusBG.html, ArgusBG})

@cindex rarStep
@cindex ParametricStepFunction
@cindex Step
@cindex RooParametricStepFunction
@item @uref{@value{COMMONURL}/html/classrarStep.html, rarStep},
      (@uref{@value{ROOFITURL}/RooParametricStepFunction.html,
      ParametricStepFunction})

@cindex rarKeys
@cindex Keys
@cindex 2DKeys
@cindex RooKeysPdf
@cindex Roo2DKeysPdf
@item @uref{@value{COMMONURL}/html/classrarKeys.html, rarKeys},
      (@uref{@value{ROOFITURL}/RooKeysPdf.html, Keys} /
      @uref{@value{ROOFITURL}/Roo2DKeysPdf.html, 2DKeys})

@cindex rarGeneric
@cindex Generic
@cindex RooGenericPdf
@item @uref{@value{COMMONURL}/html/classrarGeneric.html, rarGeneric},
      (@uref{@value{ROOFITURL}/RooGenericPdf.html, Generic})

@cindex rarGaussModel
@cindex RooGaussModel
@cindex GaussModel
@item @uref{@value{COMMONURL}/html/classrarGaussModel.html, rarGaussModel},
      (@uref{@value{ROOFITURL}/RooGaussModel.html, GaussModel})

@cindex rarDecay
@cindex RooBCPGenDecay
@cindex RooBDecay
@cindex RooDecay
@cindex BDecay
@cindex Decay
@item @uref{@value{COMMONURL}/html/classrarDecay.html, rarDecay},
      (@uref{@value{ROOFITURL}/RooBCPGenDecay.html, BCPGenDecay} /
       @uref{@value{ROOFITURL}/RooBDecay.html, BDecay} /
       @uref{@value{ROOFITURL}/RooDecay.html, RooDecay})

@cindex rarHistPdf
@cindex RooHistPdf
@cindex HistPdf
@item @uref{@value{COMMONURL}/html/classrarHistPdf.html, rarHistPdf},
      (@uref{@value{ROOFITURL}/RooHistPdf.html, RooHistPdf})

@end itemize
@end itemize

@end enumerate

@c For rarConfig
@itemize @bullet

@cindex rarConfig
@cindex base class of Dataset/pdf, rarConfig
@anchor{item_rarConfig}
@item @uref{@value{COMMONURL}/html/classrarConfig.html,
      rarConfig}, base class for dataset and pdf classes

Dataset and pdf classes (the 2nd and 3rd items above)
are both derived from base class,
@uref{#item_rarConfig, rarConfig},
which defines common data and functions
to construct dataset/pdf objects from config files.
@c
The actual creator for objects of
@uref{@value{ROOFITURL}/RooRealVar.html, RooRealVar},
@uref{@value{ROOFITURL}/RooConstVar.html, RooConstVar},
@uref{@value{ROOFITURL}/RooUnblindPrecision.html, RooUnblindPrecision},
@uref{@value{ROOFITURL}/RooCategory.html, RooCategory},
@uref{@value{ROOFITURL}/RooMappedCategory.html, RooMappedCategory},
@uref{@value{ROOFITURL}/RooThresholdCategory.html, RooThresholdCategory},
@uref{@value{ROOFITURL}/RooStringVar.html, RooStringVar},
@uref{@value{ROOFITURL}/RooFormulaVar.html, RooFormulaVar},
is
@cindex createAbsVar, rarConfig
@cindex rarConfig::createAbsVar
the
@uref{@value{COMMONURL}/html/classrarConfig.html#b12, createAbsVar}
function of rarConfig.
@c
Creation of
@uref{@value{ROOFITURL}/RooDataSet.html, RooDataSet}
is done by function
@uref{@value{COMMONURL}/html/classrarConfig.html#b15, createDataSet},
and all RooRarFit PDF objects except
@uref{#item_rarMLFitter, rarMLFitter} are created by its
@uref{@value{COMMONURL}/html/classrarConfig.html#b16, createPdf}.

@cindex Add new type of RooRarFit Pdf
@cindex how to add new type of RooRarFit Pdf
@cindex two steps to add new type of RooRarFit Pdf
To add new type of RooRarFit Pdf, one has to do two things to
make new type of RooRarFit Pdf available.
First he needs to create a new class inherited from
@uref{#item_rarBasePdf, rarBasePdf},
second he adds an entry in function
@uref{@value{COMMONURL}/html/classrarConfig.html#b16, createPdf}
so the new class can be instantiated through the standard creation mechanism
in RooRarFit.

To make it easier for user to add their own PDFs,
empty RooRarFit PDF class
@t{rarUsrPdf} (@xref{rarUsrPdfConfig})
can be modified to have quick access to PDFs
not defined currently with RooRarFit.

@end itemize
